#!/usr/bin/env python

# linux-story-gui
#
# Copyright (C) 2014 Kano Computing Ltd
# License: GNU General Public License v2 http://www.gnu.org/licenses/gpl-2.0.txt
#
# Author: Caroline Clark <caroline@kano.me>
# Launches linux tutorial in a Gtk application

import os
import sys
from gi.repository import Gtk, Gdk, GObject
GObject.threads_init()

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from linux_story.gtk3.terminal_ui import Terminal_Ui
from linux_story.gtk3.Spellbook import Spellbook, SpellbookThread
from linux_story.CheckFiles import guiThread


class MainWindow(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self)
        self.connect('delete-event', Gtk.main_quit)


visible = Terminal_Ui()
spellbook = Spellbook()


def create_terminal(challenge_number="1", step_number="1"):
    global visible
    global spellbook

    terminal = Terminal_Ui()

    win = MainWindow()
    hbox = Gtk.Box()
    win.add(hbox)
    win.set_decorated(False)

    vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
    vbox.pack_start(visible, False, False, 0)
    vbox.pack_start(spellbook, False, False, 0)

    hbox.pack_start(vbox, False, False, 0)
    hbox.pack_start(terminal, False, False, 0)

    screen = Gdk.Screen.get_default()
    width = screen.get_width()
    height = screen.get_height()

    # Allow for margin on bottom
    terminal.set_size_request(width / 2, height - 44)
    visible.set_size_request(width / 2, height - spellbook.height - 44)
    visible.set_can_focus(False)

    filepath = os.path.abspath(
        os.path.join(
            os.path.dirname(__file__),
            "linux-story"
        )
    )
    command = "python " + filepath + " " + challenge_number + " " + step_number
    terminal.launch_command(command)

    win.show_all()

    Gtk.main()


if __name__ == "__main__":
    story = guiThread(visible)
    spellbook_thread = SpellbookThread(spellbook)

    story.start()
    spellbook_thread.start()

    if len(sys.argv) == 3:
        create_terminal(sys.argv[1], sys.argv[2])
    else:
        create_terminal()
