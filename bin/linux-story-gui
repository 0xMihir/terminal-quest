#!/usr/bin/kano-splash /usr/share/linux-story/media/images/splash.png /usr/bin/env python

# linux-story-gui
#
# Copyright (C) 2014-2016 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
# Launches linux tutorial in a Gtk application


"""
linux-story-gui launches the application Terminal Quest at different points in the story

Usage:
  linux-story-gui [-d | --debug]
  linux-story-gui challenge <challenge> <step> [-d | --debug]

Options:
   -h, --help       Show this message.
   -d, --debug      Debug mode, don't hide the terminal and spellbook by default at the start
"""


import os
import sys
import threading

import docopt
import multiprocessing

import time
from gi.repository import Gtk

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)
        LOCALE_PATH = os.path.join(dir_path, 'locale')
    else:
        LOCALE_PATH = '/usr/share/locale'

# import kano_i18n.init
# from kano_profile.apps import load_app_state_variable
# from kano_profile.tracker import Tracker
from linux_story.dependencies import load_app_state_variable, Tracker, install_i18n
install_i18n('terminal-quest', LOCALE_PATH)

# Track the user's progress
kanotracker = Tracker()


from linux_story.gtk3.MainWindow import MainWindow
from linux_story.server.Server import run


def main(debug=False, challenge=None, step=None):
    window = MainWindow(debug, challenge, step)

    t = threading.Thread(target=run, kwargs={"window": window})
    t.daemon = True
    t.start()

    os.system("kano-stop-splash")
    Gtk.main()


# close the server through here
def handle_cleanup():
    pass


def tracefunc(frame, event, arg, indent=[0]):
    text = ''
    if event == "call":
        indent[0] += 2
        text = "-" * indent[0] + "> call function", frame.f_code.co_name
    elif event == "return":
        text = "<" + "-" * indent[0], "exit function", frame.f_code.co_name
        indent[0] -= 2
    with open(os.path.join(os.path.expanduser('~'), 'debug.txt'), 'a') as f:
        if text:
            if '__getattr__' not in text:
                f.write(str(text) + '\n')
    return tracefunc


if __name__ == "__main__":
    args = docopt.docopt(__doc__)

    debug = args['--debug']
    challenge = args['<challenge>']
    step = args['<step>']

    if debug:
        if os.path.isfile(os.path.join(os.path.expanduser('~'), 'debug.txt')):
            os.remove(os.path.join(os.path.expanduser('~'), 'debug.txt'))
        sys.settrace(tracefunc)

    try:
        main(debug, challenge, step)
    finally:
        handle_cleanup()
